// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;

using Foundation;
using AppKit;
using AnnoBibLibrary.Shared;
using AnnoBibLibraryMac.DataSources;
using AnnoBibLibraryMac.ControlDelegates;
using AnnoBibLibrary.Shared.Fields;
using AnnoBibLibrary.Shared.Bibliography;
using AnnoBibLibraryMac.CustomControls;

namespace AnnoBibLibraryMac
{
	public partial class NewSourceViewController : NSViewController
	{
		public NewSourceViewController (IntPtr handle) : base (handle)
		{
		}

        DataSourceOutlineViewSourceFields DataSourceSourceFields = new DataSourceOutlineViewSourceFields();
        DataSourceTableViewKeywords DataSourceKeywords = new DataSourceTableViewKeywords();
        private string _title = "";

        public Source EditingSource = null;

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            TextFieldTitle.EditingEnded += (sender, e) => _title = TextFieldTitle.StringValue;

            string[] citationFormatsStr = GlobalResources.CitationFormatsFormatted;
            NSString[] citationValues = new NSString[citationFormatsStr.Length];
            for (int i = 0; i < citationValues.Length; ++i)
                citationValues[i] = new NSString(citationFormatsStr[i]);

            foreach (var kwdGroup in GlobalResources.OpenLibrary.KeywordGroupsFormatted)
                DataSourceKeywords.Keywords.Add(new Tuple<string, string>(kwdGroup, ""));

            ComboBoxFormats.Add(citationValues);

            OutlineViewSourceFields.DataSource = DataSourceSourceFields;
            OutlineViewSourceFields.Delegate = new DelegateOutlineViewSourceFields(DataSourceSourceFields);

            OutlineViewSourceFields.OnRowDelete += (sender, e) =>
            { 
                var index = e.SelectedRow;
                foreach(var fieldGroup in DataSourceSourceFields.FieldInfo)
                {
                    if(!fieldGroup.IsExpandable)
                        --index; 

                    else
                    {
                        foreach(var field in fieldGroup.Fields)
                        {
                            --index;
                            if (index == 0)
                            {
                                fieldGroup.Fields.Remove(field);
                                break;
                            }
                        }
                    }

                    if (index == 0) break;
                }

                OutlineViewSourceFields.ReloadData();
            };

            TableViewKeywords.DataSource = DataSourceKeywords;
            TableViewKeywords.Delegate = new DelegateTableViewKeywords(DataSourceKeywords);

            ComboBoxFormats.SelectItem(0);
            FormatSourceFields(GlobalResources.GetFormat("Print"));
        }

        #region XCode Methods
        partial void OnTitleUnknownCheck(NSObject sender)
        {
            if (((NSButton)sender).State == NSCellStateValue.Off)
                TextFieldTitle.Enabled = true;

            else TextFieldTitle.Enabled = false;
        }

        partial void OnFormatChange(NSObject sender)
        {
            FormatSourceFields(GlobalResources.GetFormat(ComboBoxFormats.SelectedValue.ToString()));
        }
 partial void OnAccept(NSObject sender) {
            if (EditingSource == null)
            {
                string format = ((NSString)ComboBoxFormats.SelectedValue).LocalizedCapitalizedString;
                Source source = new Source(GlobalResources.GetFormat(format));
                foreach(var fieldGroup in DataSourceSourceFields.FieldInfo)
                {
                    if (fieldGroup.IsExpandable)
                    {
                        IComparable[] values = new IComparable[fieldGroup.Fields.Count - 1];
                        for (int i = 0; i < values.Length; ++i)
                            values[i] = fieldGroup.Fields[i].Value;

                        source.GetField(fieldGroup.FieldInfo.Name).SetValues(values);
                    }

                    else source.GetField(fieldGroup.FieldInfo.Name).SetValues(fieldGroup.Value);
                }

                if (CheckBoxTitleUnknown.State == NSCellStateValue.On)
                    source.GetField("Title").SetValues(null);

                else source.GetField("Title").SetValues(_title);

                foreach (var row in DataSourceKeywords.Keywords)
                    source.SetKeywordGroup(
                        row.Item1,
                        row.Item2.Split(',').Select((arg) => arg.Trim()).ToArray()
                );

                GlobalResources.OpenLibrary.AddSource(source);
                source.Save(GlobalResources.SourcesDirectory);

                NSApplication.SharedApplication.KeyWindow.Close();
            }
        }

        partial void OnCancel(NSObject sender)
        {
            NSApplication.SharedApplication.KeyWindow.Close();
        }
        #endregion

        #region Private Methods
        private void FormatSourceFields(CitationFormat format)
        {
            DataSourceSourceFields.FieldInfo.Clear();
            foreach(var fieldInfo in format.Fields) 
            {
                if (fieldInfo.Name.ToLower() != "title")
                {
                    DataSourceSourceFields.FieldInfo.Add(
                        new DataSourceOutlineViewSourceFieldsInfo(
                            fieldInfo
                        )
                    );
                }
            }

            OutlineViewSourceFields.ReloadData();
        }
        #endregion
    }
}
